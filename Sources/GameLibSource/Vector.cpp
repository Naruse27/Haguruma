#include "Vector.h"

//******************************************************************************
//
//      Vector2
//
//******************************************************************************

//--------------------------------------------------------------
//  =
//--------------------------------------------------------------
Vector2& Vector2::operator=(const Vector2& v)
{
    x = v.x;
    y = v.y;
    return *this;
}

//--------------------------------------------------------------
//  +=
//--------------------------------------------------------------
Vector2& Vector2::operator+=(const Vector2& v)
{
    x += v.x;
    y += v.y;
    return *this;
}

//--------------------------------------------------------------
//  -=
//--------------------------------------------------------------
Vector2& Vector2::operator-=(const Vector2& v)
{
    x -= v.x;
    y -= v.y;
    return *this;
}

//--------------------------------------------------------------
//  *=
//--------------------------------------------------------------
Vector2& Vector2::operator*=(float f)
{
    x *= f;
    y *= f;
    return *this;
}

//--------------------------------------------------------------
//  /=
//--------------------------------------------------------------
Vector2& Vector2::operator/=(float f)
{
    x /= f;
    y /= f;
    return *this;
}

//--------------------------------------------------------------
//  +（符号）
//--------------------------------------------------------------
Vector2 Vector2::operator+() const
{
    return Vector2(x, y);
}

//--------------------------------------------------------------
//  -（符号）
//--------------------------------------------------------------
Vector2 Vector2::operator-() const
{
    return Vector2(-x, -y);
}

//--------------------------------------------------------------
//  +（和）
//--------------------------------------------------------------
Vector2 Vector2::operator+(const Vector2& v) const
{
    return Vector2(x + v.x, y + v.y);
}

//--------------------------------------------------------------
//  -（差）
//--------------------------------------------------------------
Vector2 Vector2::operator-(const Vector2& v) const
{
    return Vector2(x - v.x, y - v.y);
}

//--------------------------------------------------------------
//  *
//--------------------------------------------------------------
Vector2 Vector2::operator*(float f) const
{
    return Vector2(x * f, y * f);
}

//--------------------------------------------------------------
//  *
//--------------------------------------------------------------
Vector2 operator*(float f, const Vector2& v)
{
    return Vector2(v.x * f, v.y * f);
}

//--------------------------------------------------------------
//  /
//--------------------------------------------------------------
Vector2 Vector2::operator/(float f) const
{
    return Vector2(x / f, y / f);
}

//--------------------------------------------------------------
//  ==
//--------------------------------------------------------------
bool Vector2::operator==(const Vector2& v) const
{
    return (x == v.x) && (y == v.y);
}

//--------------------------------------------------------------
//  !=
//--------------------------------------------------------------
bool Vector2::operator != (const Vector2& v) const
{
    return (x != v.x) || (y != v.y);
}

//******************************************************************************
//
//      Vector3
//
//******************************************************************************

//--------------------------------------------------------------
//  =
//--------------------------------------------------------------
Vector3& Vector3::operator=(const Vector3& v)
{
    x = v.x;
    y = v.y;
    z = v.z;
    return *this;
}

//--------------------------------------------------------------
//  +=
//--------------------------------------------------------------
Vector3& Vector3::operator+=(const Vector3& v)
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}

//--------------------------------------------------------------
//  -=
//--------------------------------------------------------------
Vector3& Vector3::operator-=(const Vector3& v)
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}

//--------------------------------------------------------------
//  *=
//--------------------------------------------------------------
Vector3& Vector3::operator*=(float f)
{
    x *= f;
    y *= f;
    z *= f;
    return *this;
}

//--------------------------------------------------------------
//  /=
//--------------------------------------------------------------
Vector3& Vector3::operator/=(float f)
{
    x /= f;
    y /= f;
    z /= f;
    return *this;
}

//--------------------------------------------------------------
//  +（符号）
//--------------------------------------------------------------
Vector3 Vector3::operator+() const
{
    return Vector3(x, y, z);
}

//--------------------------------------------------------------
//  -（符号）
//--------------------------------------------------------------
Vector3 Vector3::operator-() const
{
    return Vector3(-x, -y, -z);
}

//--------------------------------------------------------------
//  +（和）
//--------------------------------------------------------------
Vector3 Vector3::operator+(const Vector3& v) const
{
    return Vector3(x + v.x, y + v.y, z + v.z);
}

//--------------------------------------------------------------
//  -（差）
//--------------------------------------------------------------
Vector3 Vector3::operator-(const Vector3& v) const
{
    return Vector3(x - v.x, y - v.y, z - v.z);
}

//--------------------------------------------------------------
//  *
//--------------------------------------------------------------
Vector3 Vector3::operator*(float f) const
{
    return Vector3(x * f, y * f, z * f);
}

//--------------------------------------------------------------
//  *
//--------------------------------------------------------------
Vector3 operator*(float f, const Vector3& v)
{
    return Vector3(v.x * f, v.y * f, v.z * f);
}

//--------------------------------------------------------------
//  /
//--------------------------------------------------------------
Vector3 Vector3::operator/(float f) const
{
    return Vector3(x / f, y / f, z / f);
}

//--------------------------------------------------------------
//  ==
//--------------------------------------------------------------
bool Vector3::operator==(const Vector3& v) const
{
    return (x == v.x) && (y == v.y) && (z == v.z);
}

//--------------------------------------------------------------
//  !=
//--------------------------------------------------------------
bool Vector3::operator!=(const Vector3& v) const
{
    return (x != v.x) || (y != v.y) || (z != v.z);
}

Vector3::Vector3(const Vector2& v)
{
    x = v.x;
    y = v.y;
    z = 0;
}

//--------------------------------------------------------------
//  VECTOR2をVECTOR3に代入（zは無視）
//--------------------------------------------------------------
Vector3& Vector3::operator=(const Vector2& v)
{
    x = v.x;
    y = v.y;
    z = 0;
    return *this;
}