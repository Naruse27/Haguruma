//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 worldViewProjection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 materialColor;              // Offset:  128 Size:    16
//   float4 lightDirection;             // Offset:  144 Size:    16 [unused]
//   row_major float4x4 bone_transforms[128];// Offset:  160 Size:  8192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[522], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyz
dcl_output o4.xyz
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o4.x <- <main return value>.worldPos.x; o4.y <- <main return value>.worldPos.y; o4.z <- <main return value>.worldPos.z; 
//   o3.x <- <main return value>.worldNormal.x; o3.y <- <main return value>.worldNormal.y; o3.z <- <main return value>.worldNormal.z; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 8 "D:\自作\Rebel - コピE\Shader\PhongSkinnedMeshVS.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 9
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 11
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r0.xyzx  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
mov r3.xyz, r1.xyzx  // r3.x <- n.x; r3.y <- n.y; r3.z <- n.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r3.w, r1.w, l(4)
  breakc_z r3.w

#line 13
  dp4 r3.w, v3.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v0.xxxx, cb0[r4.x + 10].xxyz
  mul r5.xyz, v0.yyyy, cb0[r4.x + 11].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v0.zzzz, cb0[r4.x + 12].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v0.wwww, cb0[r4.x + 13].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r3.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 14
  dp4 r3.w, v3.xyzw, icb[r1.w + 0].xyzw
  itof r4.x, l(0)
  and r5.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.yz, r5.yywy, r5.xxzx
  or r4.y, r4.z, r4.y
  imul null, r4.y, r4.y, l(4)
  mul r5.xyz, v1.xxxx, cb0[r4.y + 10].xyzx
  mul r6.xyz, v1.yyyy, cb0[r4.y + 11].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r6.xyz, v1.zzzz, cb0[r4.y + 12].xyzx
  add r5.xyz, r5.xyzx, r6.xyzx
  mul r4.xyz, r4.xxxx, cb0[r4.y + 13].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r3.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 15
  iadd r1.w, r1.w, l(1)
endloop 

#line 16
mov r2.xyz, r2.xyzx  // r2.x <- position.x; r2.y <- position.y; r2.z <- position.z
mov r2.w, l(1.000000)  // r2.w <- position.w

#line 17
mov r3.xyz, r3.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z

#line 19
mul r0.xyzw, r2.xxxx, cb0[0].xyzw
mul r1.xyzw, r2.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, r2.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, r2.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 21
itof r1.x, l(0)  // r1.x <- normal.w

#line 22
mul r4.xyzw, r3.xxxx, cb0[4].xyzw
mul r5.xyzw, r3.yyyy, cb0[5].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r3.xyzw, r3.zzzz, cb0[6].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r1.xyzw, r1.xxxx, cb0[7].xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
dp4 r1.w, r1.xyzw, r1.xyzw
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 25
mov r3.xyzw, cb0[8].xyzw  // r3.x <- vout.color.x; r3.y <- vout.color.y; r3.z <- vout.color.z; r3.w <- vout.color.w

#line 26
mov r4.xy, v2.xyxx  // r4.x <- vout.texcoord.x; r4.y <- vout.texcoord.y

#line 28
dp4 r5.x, cb0[4].xyzw, r2.xyzw  // r5.x <- vout.worldPos.x
dp4 r5.y, cb0[5].xyzw, r2.xyzw  // r5.y <- vout.worldPos.y
dp4 r5.z, cb0[6].xyzw, r2.xyzw  // r5.z <- vout.worldPos.z

#line 29
mov r1.xyz, r1.xyzx  // r1.x <- vout.worldNormal.x; r1.y <- vout.worldNormal.y; r1.z <- vout.worldNormal.z

#line 31
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r3.xyzw
mov o3.xyz, r1.xyzx
mov o4.xyz, r5.xyzx
mov o2.xy, r4.xyxx
ret 
// Approximately 73 instruction slots used
