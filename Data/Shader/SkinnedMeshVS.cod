//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer OBJECT_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64
//   float4 materialColor;              // Offset:   64 Size:    16
//   row_major float4x4 boneTransforms[256];// Offset:   80 Size: 16384
//
// }
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16 [unused]
//   float4 cameraPosition;             // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// OBJECT_CONSTANT_BUFFER            cbuffer      NA          NA            cb0      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float       
// TEXCOORD                 0   xy          3     NONE   float   xy  
// WEIGHTS                  0   xyzw        4     NONE   float   xyzw
// BONES                    0   xyzw        5     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[1029], dynamicIndexed
dcl_constantbuffer CB1[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o4.xy
dcl_output o5.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- vin.position.x; v0.y <- vin.position.y; v0.z <- vin.position.z; v0.w <- vin.position.w; 
//   v1.x <- vin.normal.x; v1.y <- vin.normal.y; v1.z <- vin.normal.z; v1.w <- vin.normal.w; 
//   v2.x <- vin.tangent.x; v2.y <- vin.tangent.y; v2.z <- vin.tangent.z; v2.w <- vin.tangent.w; 
//   v3.x <- vin.texcoord.x; v3.y <- vin.texcoord.y; 
//   v4.x <- vin.boneWeights.x; v4.y <- vin.boneWeights.y; v4.z <- vin.boneWeights.z; v4.w <- vin.boneWeights.w; 
//   v5.x <- vin.boneIndices.x; v5.y <- vin.boneIndices.y; v5.z <- vin.boneIndices.z; v5.w <- vin.boneIndices.w; 
//   o3.x <- <main return value>.worldTangent.x; o3.y <- <main return value>.worldTangent.y; o3.z <- <main return value>.worldTangent.z; o3.w <- <main return value>.worldTangent.w; 
//   o5.x <- <main return value>.color.x; o5.y <- <main return value>.color.y; o5.z <- <main return value>.color.z; o5.w <- <main return value>.color.w; 
//   o4.x <- <main return value>.texcoord.x; o4.y <- <main return value>.texcoord.y; 
//   o2.x <- <main return value>.worldNormal.x; o2.y <- <main return value>.worldNormal.y; o2.z <- <main return value>.worldNormal.z; o2.w <- <main return value>.worldNormal.w; 
//   o1.x <- <main return value>.worldPosition.x; o1.y <- <main return value>.worldPosition.y; o1.z <- <main return value>.worldPosition.z; o1.w <- <main return value>.worldPosition.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 5 "D:\„ÉÅE"
itof r0.x, l(0)  // r0.x <- vin.normal.w

#line 7
itof r0.yzw, l(0, 0, 0, 0)  // r0.y <- blendedPosition.x; r0.z <- blendedPosition.y; r0.w <- blendedPosition.z

#line 10
mov r1.x, l(0)  // r1.x <- boneIndex
mov r1.yzw, r0.yyzw  // r1.y <- blendedPosition.x; r1.z <- blendedPosition.y; r1.w <- blendedPosition.z
mov r2.x, r1.x  // r2.x <- boneIndex
loop 
  ilt r2.y, r2.x, l(4)
  breakc_z r2.y

#line 12
  dp4 r2.y, v4.xyzw, icb[r2.x + 0].xyzw
  and r3.xyzw, v5.xyzw, icb[r2.x + 4].xyzw
  or r2.zw, r3.yyyw, r3.xxxz
  or r2.z, r2.w, r2.z
  imul null, r2.z, r2.z, l(4)
  mul r3.xyz, v0.xxxx, cb0[r2.z + 5].xyzx
  mul r4.xyz, v0.yyyy, cb0[r2.z + 6].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.zzzz, cb0[r2.z + 7].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r4.xyz, v0.wwww, cb0[r2.z + 8].xyzx
  add r3.xyz, r3.xyzx, r4.xyzx
  mul r2.yzw, r2.yyyy, r3.xxyz
  add r1.yzw, r1.yyzw, r2.yyzw

#line 16
  iadd r2.x, r2.x, l(1)
endloop 

#line 17
mov r1.yzw, r1.yyzw  // r1.y <- vin.position.x; r1.z <- vin.position.y; r1.w <- vin.position.z
mov r0.y, l(1.000000)  // r0.y <- vin.position.w

#line 20
mul r2.xyzw, cb0[0].xxxx, cb1[0].xyzw
mul r3.xyzw, cb0[0].yyyy, cb1[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[0].zzzz, cb1[2].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[0].wwww, cb1[3].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, cb0[1].xxxx, cb1[0].xyzw
mul r4.xyzw, cb0[1].yyyy, cb1[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[1].zzzz, cb1[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[1].wwww, cb1[3].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, cb0[2].xxxx, cb1[0].xyzw
mul r5.xyzw, cb0[2].yyyy, cb1[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].zzzz, cb1[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[2].wwww, cb1[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, cb0[3].xxxx, cb1[0].xyzw
mul r6.xyzw, cb0[3].yyyy, cb1[1].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].zzzz, cb1[2].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, cb0[3].wwww, cb1[3].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r2.xyzw, r1.yyyy, r2.xyzw
mul r3.xyzw, r1.zzzz, r3.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r1.wwww, r4.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r0.yyyy, r5.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw  // r2.x <- vout.position.x; r2.y <- vout.position.y; r2.z <- vout.position.z; r2.w <- vout.position.w

#line 22
mul r3.xyzw, r1.yyyy, cb0[0].xyzw
mul r4.xyzw, r1.zzzz, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r1.xyzw, r1.wwww, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
mul r3.xyzw, r0.yyyy, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- vout.worldPosition.x; r1.y <- vout.worldPosition.y; r1.z <- vout.worldPosition.z; r1.w <- vout.worldPosition.w

#line 23
mul r3.xyzw, v1.xxxx, cb0[0].xyzw
mul r4.xyzw, v1.yyyy, cb0[1].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r4.xyzw, v1.zzzz, cb0[2].xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r0.xyzw, r0.xxxx, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r3.xyzw
dp4 r3.x, r0.xyzw, r0.xyzw
rsq r3.x, r3.x
mul r0.xyzw, r0.xyzw, r3.xxxx  // r0.x <- vout.worldNormal.x; r0.y <- vout.worldNormal.y; r0.z <- vout.worldNormal.z; r0.w <- vout.worldNormal.w

#line 25
mov r3.xy, v3.xyxx  // r3.x <- vout.texcoord.x; r3.y <- vout.texcoord.y

#line 26
mov r4.xyzw, cb0[4].xyzw  // r4.x <- vout.color.x; r4.y <- vout.color.y; r4.z <- vout.color.z; r4.w <- vout.color.w

#line 28
mov o0.xyzw, r2.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xyzw, r0.xyzw
mov o5.xyzw, r4.xyzw
mov o4.xy, r3.xyxx
ret 
// Approximately 86 instruction slots used
