//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 worldViewProjection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 materialColor;              // Offset:  128 Size:    16
//   float4 lightDirection;             // Offset:  144 Size:    16 [unused]
//   row_major float4x4 bone_transforms[128];// Offset:  160 Size:  8192 [unused]
//
// }
//
// cbuffer CONSTANT_BUFFER_LIGHT_01
// {
//
//   float4 LightColor;                 // Offset:    0 Size:    16 [unused]
//   float4 LightDir;                   // Offset:   16 Size:    16 [unused]
//   float4 AmbientColor;               // Offset:   32 Size:    16
//   float4 EyePos;                     // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer CONSTANT_BUFFER_LIGHT_02
// {
//
//   struct POINTLIGHT
//   {
//       
//       float index;                   // Offset:    0
//       float range;                   // Offset:    4
//       float type;                    // Offset:    8
//       float dumy;                    // Offset:   12
//       float4 pos;                    // Offset:   16
//       float4 color;                  // Offset:   32
//
//   } PointLight[96];                  // Offset:    0 Size:  4608
//   
//   struct SPOTLIGHT
//   {
//       
//       float index;                   // Offset: 4608
//       float range;                   // Offset: 4612
//       float type;                    // Offset: 4616
//       float inner_corn;              // Offset: 4620
//       float outer_corn;              // Offset: 4624
//       float dumy0;                   // Offset: 4628
//       float dumy1;                   // Offset: 4632
//       float dumy2;                   // Offset: 4636
//       float4 pos;                    // Offset: 4640
//       float4 color;                  // Offset: 4656
//       float4 dir;                    // Offset: 4672
//
//   } SpotLight[32];                   // Offset: 4608 Size:  2560
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// mySampler                         sampler      NA          NA             s0      1 
// myTexture                         texture  float4          2d             t0      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
// CONSTANT_BUFFER_LIGHT_01          cbuffer      NA          NA            cb2      1 
// CONSTANT_BUFFER_LIGHT_02          cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[9], immediateIndexed
dcl_constantbuffer CB2[3], immediateIndexed
dcl_constantbuffer CB3[448], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_temps 11
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.color.x; v1.y <- pin.color.y; v1.z <- pin.color.z; v1.w <- pin.color.w; 
//   v2.x <- pin.texcoord.x; v2.y <- pin.texcoord.y; 
//   v3.x <- pin.worldNormal.x; v3.y <- pin.worldNormal.y; v3.z <- pin.worldNormal.z; 
//   v4.x <- pin.worldPos.x; v4.y <- pin.worldPos.y; v4.z <- pin.worldPos.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 10 "D:\自作\Rebel - コピE\Library\Shader\PhongSkinnedMeshPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
mul r0.xyz, r0.xyzx, v1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 11
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v3.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 16
mov r2.xyz, cb2[2].xyzx  // r2.x <- A.x; r2.y <- A.y; r2.z <- A.z

#line 20
itof r3.xyz, l(1, 1, 1, 0)  // r3.x <- Kd.x; r3.y <- Kd.y; r3.z <- Kd.z

#line 21
nop 

#line 25
nop 

#line 32
itof r4.xyz, l(0, 0, 0, 0)  // r4.x <- PD.x; r4.y <- PD.y; r4.z <- PD.z

#line 35
mov r0.w, l(0)  // r0.w <- i
mov r5.xyz, r4.xyzx  // r5.x <- PD.x; r5.y <- PD.y; r5.z <- PD.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(96)
  breakc_z r2.w

#line 38
  imul null, r2.w, r1.w, l(3)
  itof r3.w, l(0)
  eq r2.w, r3.w, cb3[r2.w + 0].z
  if_nz r2.w

#line 39
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 41
  imul null, r2.w, r1.w, l(3)
  mov r6.xyz, -cb3[r2.w + 1].xyzx
  add r6.xyz, r6.xyzx, v4.xyzx  // r6.x <- PL.x; r6.y <- PL.y; r6.z <- PL.z

#line 43
  dp3 r2.w, r6.xyzx, r6.xyzx
  sqrt r2.w, r2.w  // r2.w <- d

#line 44
  imul null, r3.w, r1.w, l(3)
  mov r3.w, cb3[r3.w + 0].y  // r3.w <- r

#line 47
  lt r4.w, r3.w, r2.w
  if_nz r4.w

#line 48
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 49
  itof r4.w, l(1)
  div r2.w, r2.w, r3.w
  mov r2.w, -r2.w
  add r2.w, r2.w, l(1.000000)
  max r2.w, r2.w, r4.w  // r2.w <- influence

#line 50
  dp3 r3.w, r6.xyzx, r6.xyzx
  rsq r3.w, r3.w
  mul r6.xyz, r3.wwww, r6.xyzx

#line 51
  imul null, r3.w, r1.w, l(3)
  mov r7.xyz, cb3[r3.w + 2].xyzx  // r7.x <- PC.x; r7.y <- PC.y; r7.z <- PC.z

#line 54
  nop 
  mov r8.xyz, r1.xyzx
  mov r6.xyz, r6.xyzx
  mov r7.xyz, r7.xyzx
  mov r9.xyz, r3.xyzx

#line 40 "D:\自作\Rebel - コピー\Library\Shader\Function.hlsli"
  mov r6.xyz, -r6.xyzx
  dp3 r3.w, r8.xyzx, r6.xyzx  // r3.w <- D

#line 41
  itof r4.w, l(0)
  max r3.w, r3.w, r4.w

#line 42
  mul r6.xyz, r7.xyzx, r9.xyzx
  mul r6.xyz, r3.wwww, r6.xyzx  // r6.x <- <Diffuse return value>.x; r6.y <- <Diffuse return value>.y; r6.z <- <Diffuse return value>.z

#line 54 "D:\自作\Rebel - コピE\Library\Shader\PhongSkinnedMeshPS.hlsl"
  mul r6.xyz, r2.wwww, r6.xyzx
  mul r6.xyz, r2.wwww, r6.xyzx
  add r5.xyz, r5.xyzx, r6.xyzx

#line 57
  nop 

#line 35
  iadd r1.w, r1.w, l(1)

#line 58
endloop 

#line 65
itof r4.xyz, l(0, 0, 0, 0)  // r4.x <- SD.x; r4.y <- SD.y; r4.z <- SD.z

#line 68
mov r0.w, l(0)  // r0.w <- j
mov r6.xyz, r4.xyzx  // r6.x <- SD.x; r6.y <- SD.y; r6.z <- SD.z
mov r1.w, r0.w  // r1.w <- j
loop 
  ilt r2.w, r1.w, l(32)
  breakc_z r2.w

#line 70
  imul null, r2.w, r1.w, l(5)
  itof r3.w, l(0)
  eq r2.w, r3.w, cb3[r2.w + 288].z
  if_nz r2.w
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 72
  imul null, r2.w, r1.w, l(5)
  mov r7.xyz, -cb3[r2.w + 290].xyzx
  add r7.xyz, r7.xyzx, v4.xyzx  // r7.x <- SL.x; r7.y <- SL.y; r7.z <- SL.z

#line 74
  dp3 r2.w, r7.xyzx, r7.xyzx
  sqrt r2.w, r2.w  // r2.w <- d

#line 75
  imul null, r3.w, r1.w, l(5)
  mov r3.w, cb3[r3.w + 288].y  // r3.w <- r

#line 76
  lt r2.w, r3.w, r2.w
  if_nz r2.w
    iadd r1.w, r1.w, l(1)
    continue 
  endif 

#line 77
  imul null, r2.w, r1.w, l(5)
  dp3 r3.w, cb3[r2.w + 292].xyzx, cb3[r2.w + 292].xyzx
  rsq r3.w, r3.w
  mul r8.xyz, r3.wwww, cb3[r2.w + 292].xyzx  // r8.x <- SFront.x; r8.y <- SFront.y; r8.z <- SFront.z

#line 78
  dp3 r2.w, r7.xyzx, r7.xyzx
  rsq r2.w, r2.w
  mul r7.xyz, r2.wwww, r7.xyzx

#line 80
  dp3 r2.w, r7.xyzx, r8.xyzx  // r2.w <- angle

#line 81
  imul null, r3.w, r1.w, l(5)
  imul null, r4.w, r1.w, l(5)
  mov r4.w, -cb3[r4.w + 289].x
  add r3.w, r4.w, cb3[r3.w + 288].w  // r3.w <- area

#line 82
  imul null, r4.w, r1.w, l(5)
  mov r2.w, -r2.w
  add r2.w, r2.w, cb3[r4.w + 288].w  // r2.w <- influence3

#line 84
  itof r4.w, l(1)
  div r2.w, r2.w, r3.w
  mov r2.w, -r2.w
  add r2.w, r2.w, l(1.000000)
  max r2.w, r2.w, r4.w  // r2.w <- influence3

#line 85
  itof r3.w, l(1)  // r3.w <- influence2

#line 87
  imul null, r4.w, r1.w, l(5)
  mov r8.xyz, cb3[r4.w + 291].xyzx  // r8.x <- SC.x; r8.y <- SC.y; r8.z <- SC.z

#line 88
  nop 
  mov r9.xyz, r1.xyzx
  mov r7.xyz, r7.xyzx
  mov r8.xyz, r8.xyzx
  mov r10.xyz, r3.xyzx

#line 40 "D:\自作\Rebel - コピー\Library\Shader\Function.hlsli"
  mov r7.xyz, -r7.xyzx
  dp3 r4.w, r9.xyzx, r7.xyzx  // r4.w <- D

#line 41
  itof r5.w, l(0)
  max r4.w, r4.w, r5.w

#line 42
  mul r7.xyz, r8.xyzx, r10.xyzx
  mul r7.xyz, r4.wwww, r7.xyzx  // r7.x <- <Diffuse return value>.x; r7.y <- <Diffuse return value>.y; r7.z <- <Diffuse return value>.z

#line 88 "D:\自作\Rebel - コピE\Library\Shader\PhongSkinnedMeshPS.hlsl"
  mul r7.xyz, r3.wwww, r7.xyzx
  mul r7.xyz, r3.wwww, r7.xyzx
  mul r7.xyz, r2.wwww, r7.xyzx
  add r6.xyz, r6.xyzx, r7.xyzx

#line 89
  nop 

#line 68
  iadd r1.w, r1.w, l(1)

#line 90
endloop 

#line 92
add r1.xyz, r2.xyzx, r5.xyzx
add r1.xyz, r6.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, v1.xyzx
mul r0.xyz, r0.xyzx, r1.xyzx

#line 93
mov r0.w, cb0[8].w  // r0.w <- color.w

#line 94
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 137 instruction slots used
